
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"
#include "adc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "lcd.h"
#include "string.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
const uint16_t maxHeight = 240;
const uint16_t maxWidth = 320;
const uint16_t minHeight = 0;
const uint16_t minWidth = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void MoveRectClick(uint16_t* startX, uint16_t* startY, uint16_t height, uint16_t width, uint16_t move);
void MoveBall(int16_t* ballX, int16_t* ballY, uint16_t radius, int16_t* moveX, int16_t* moveY);
void MoveRectPress(uint16_t* startX, uint16_t* startY, uint16_t height, uint16_t width, uint16_t move);
void MoveRectTouch(void);
void MoveRect(uint16_t* startX, uint16_t* startY, uint16_t height, uint16_t width, uint16_t move);
void LooseGame(void);
void ChangeDirection(int16_t ballX, int16_t ballY, uint16_t radius, int16_t* moveX, int16_t* moveY);
uint8_t IsExit(int16_t* ballX, int16_t* ballY, uint16_t radius, int16_t boardX, int16_t boardY, int16_t* moveX, int16_t* moveY);
//uint8_t ChangeDirection(int16_t coordX, int16_t coordY, uint16_t boardX, uint16_t boardY, int16_t* moveX, int16_t* moveY);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_ADC1_Init();
  MX_UART4_Init();
  /* USER CODE BEGIN 2 */
  LCD_Init();
  //PrintHello();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t left[] = "l\r\n";
  uint8_t right[] = "r\r\n";
  uint8_t command[3] = {0};
  uint8_t cmdSize = sizeof(command);
  uint8_t restart[5] = {0};
  uint8_t counterCMD = 0;
  uint8_t counterRST = 0;
  uint16_t move = 0;
  int16_t moveX = 10;
  int16_t moveY = 10;
  uint16_t width = 40;
  uint16_t height = 10;
  uint16_t boardX = 100;
  uint16_t boardY = maxWidth - height;
  int16_t ballX = 118;
  int16_t ballY = 158;
  uint16_t radius = 2;

  LCD_SetCursor(0, 0);
  LCD_FillCircle(ballX, ballY, radius, RED);
  LCD_FillRect(boardX, boardY, width, height, BLUE);

  while (1)
  {
	  //MoveRectClick(&boardX, &boardY, height, width, move);
	  while (counterCMD < cmdSize )
	  	  {
	  		  if (HAL_UART_Receive(&huart4, command+counterCMD, 1, 10) == HAL_OK)
	  		  {
	  			  if ( command[counterCMD] == '\n' )
	  			  {
	  				  HAL_UART_Abort(&huart4);
	  				  break;
	  			  }
	  		  	  ++counterCMD;
	  		  }
	  	  }
	  	  size_t read_size = strlen((char *) command);
	  	  LCD_Printf("Read: %d\n", read_size);

	  	//if ( read_size > 0 )
	  	{
	  		LCD_Printf("Received: %s\n", command);
	  	}
	  if (strcmp(left, command) == 0 )
		  move = -15;
	  if (strcmp(right, command) == 0 )
		  move = 15;
	  MoveRect(&boardX, &boardY, height, width, move);
	  MoveBall(&ballX, &ballY, radius, &moveX, &moveY);
	  if ( IsExit(&ballX, &ballY, radius, boardX, boardY, &moveX, &moveY) )
	  {
		  LooseGame();
		  break;
	  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
uint8_t IsExit(int16_t* ballX, int16_t* ballY, uint16_t radius, int16_t boardX, int16_t boardY, int16_t* moveX, int16_t* moveY)
{
	uint16_t width = 40;
	uint16_t height = 10;
	uint8_t result = 0;

	if ( *ballX >= maxHeight /*&& *ballY < (maxWidth - 2 * radius)*/ )
	{
		*ballX = maxHeight - 2 * radius;
		*moveX *= -1;
	}

	if ( *ballX <= minHeight /*&& *ballY < (maxWidth - 2 * radius)*/ )
	{
		*ballX = minHeight;
		*moveX *= -1;
	}

	if ( *ballY <= minWidth )
	{
		*ballY = minWidth;
		*moveY *= -1;
	}

	if ( ((*ballX == (boardX + width)) || ((*ballX + 2 * radius) == boardX)) && ((*ballY + 2 * radius) >= boardY) )
	{
		*moveX *= -1;
		*moveY *= -1;
	} else if ( (*ballX + 2 * radius) > boardX && *ballX < (boardX + width) && (*ballY + 2 * radius) >= boardY )
	{
		*ballY = boardY - 2 * radius;
		*moveY *= -1;
	}

	if ( *ballY >= maxWidth )
		result = 1;

	LCD_FillCircle(*ballX, *ballY, radius, RED);
	HAL_Delay(200);

	return result;
}

void ChangeDirection(int16_t ballX, int16_t ballY, uint16_t radius, int16_t* moveX, int16_t* moveY)
{
	//uint16_t width = 40;
	uint16_t height = 10;

	if ( ballX >= maxHeight || ballX <= minHeight )
		*moveX *= -1;

	//if ( (coordY >= boardY && (coordX >= boardX && coordX <= boardX + width) ) || coordY <= minWidth )
	if ( (ballY >= maxWidth - height - 2 * radius ) || ballY <= minWidth )
		*moveY *= -1;
}

void MoveBall(int16_t* ballX, int16_t* ballY, uint16_t radius, int16_t* moveX, int16_t* moveY)
{
	LCD_FillCircle(*ballX, *ballY, radius, BLACK);
	*ballX += *moveX;
	*ballY += *moveY;

	//ChangeDirection(*ballX, *ballY, moveX, moveY);

//	if ( *ballX >= maxHeight )
//		*ballX = maxHeight - 2 * radius;
//	if ( *ballX < minHeight )
//		*ballX = minHeight;
//	if ( *ballY > maxWidth - 2 * radius )
//		*ballY = maxWidth - 2 * radius;
//	if ( *ballY < minWidth )
//		*ballY = minWidth;

	//LCD_FillCircle(*ballX, *ballY, radius, RED);
	//HAL_Delay(200);
}

void LooseGame(void)
{
	LCD_FillScreen(BLACK);
	LCD_SetCursor(100, 160);
	LCD_Printf("Looser!!!");
	//break;
}

void MoveRectClick(uint16_t* startX, uint16_t* startY, uint16_t height, uint16_t width, uint16_t move)
{
//  uint16_t startX = 30;
//  uint16_t startY = 60;
//  uint16_t move = 10;
//  uint16_t width = 40;
//  uint16_t height = 15;

  GPIO_PinState btn1 = GPIO_PIN_RESET;
  GPIO_PinState btn2 = GPIO_PIN_RESET;
  GPIO_PinState btn3 = GPIO_PIN_RESET;
  GPIO_PinState btn4 = GPIO_PIN_RESET;

	btn1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
	btn2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
	btn3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
	btn4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);

	if ( btn1 == GPIO_PIN_SET )
	{
	  LCD_FillRect(*startX, *startY, width, height, BLACK);
	  *startX += move;
	  if ( *startX > maxHeight - width )
		  *startX = maxHeight - width;

	  LCD_FillRect(*startX, *startY, width, height, BLUE);
	  HAL_Delay(100);
	  btn1 = GPIO_PIN_RESET;
	}

	if ( btn2 == GPIO_PIN_SET )
	{
	  LCD_FillRect(*startX, *startY, width, height, BLACK);

	  //if ( *startX < move )
	  if ( *startX < minHeight )
		  *startX = minHeight;
		  //*startX = maxHeight - width;
	  else
		  *startX -= move;

	  LCD_FillRect(*startX, *startY, width, height, BLUE);
	  HAL_Delay(100);
	  btn2 = GPIO_PIN_RESET;
	}

	if ( btn3 == GPIO_PIN_SET )
	{
	  LCD_FillRect(*startX, *startY, width, height, BLACK);
	  *startY += move;
	  if ( *startY > maxWidth - height )
		  *startY = minWidth;

	  LCD_FillRect(*startX, *startY, width, height, BLUE);
	  HAL_Delay(200);
	  btn3 = GPIO_PIN_RESET;
	}

//	if ( btn4 == GPIO_PIN_SET )
//	{
//	  LCD_FillRect(*startX, *startY, width, height, BLACK);
//
//	  if ( *startY < move )
//		  *startY = minWidth;
//	  else
//		  *startY -= move;
//
//	  LCD_FillRect(*startX, *startY, width, height, BLUE);
//	  HAL_Delay(200);
//	  btn4 = GPIO_PIN_RESET;
//	}
}

void MoveRectPress(uint16_t* startX, uint16_t* startY, uint16_t height, uint16_t width, uint16_t move)
{
	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET )
	{
		LCD_FillRect(*startX, *startY, width, height, BLACK);
		*startX += move;
		if ( *startX > maxHeight - width )
			*startX = minHeight;

		LCD_FillRect(*startX, *startY, width, height, BLUE);
		HAL_Delay(50);
	}

	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET )
	{
		LCD_FillRect(*startX, *startY, width, height, BLACK);

		if ( *startX < move )
			*startX = maxHeight - width;
		else
			*startX -= move;

		LCD_FillRect(*startX, *startY, width, height, BLUE);
		HAL_Delay(50);
	}

	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET )
	{
		LCD_FillRect(*startX, *startY, width, height, BLACK);
		*startY += move;
		if ( *startY > maxWidth - height )
			*startY = minWidth;

		LCD_FillRect(*startX, *startY, width, height, BLUE);
		HAL_Delay(50);
	}

	//	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET )
	//	{
	//	  LCD_FillRect(*startX, *startY, width, height, BLACK);
	//
	//	  if ( *startY < move )
	//		  *startY = minWidth;
	//	  else
	//		  *startY -= move;
	//
	//	  LCD_FillRect(*startX, *startY, width, height, BLUE);
	//	  HAL_Delay(50);
	//	}
}

void MoveRectTouch(void)
{

}

void MoveRect(uint16_t* startX, uint16_t* startY, uint16_t height, uint16_t width, uint16_t move)
{
	  LCD_FillRect(*startX, *startY, width, height, BLACK);
	  *startX += move;
	  if ( *startX > maxHeight - width )
		  *startX = maxHeight - width;
	  if ( *startX < minHeight )
		  *startX = minHeight;

	  LCD_FillRect(*startX, *startY, width, height, BLUE);
	  HAL_Delay(100);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
